# -*- coding: utf-8 -*-
"""assignment-week06.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/gist/Shreyas6474/91390141d8129cc3f5b18229b0e2711e/assignment-week06.ipynb

Data Exploration
"""

import pandas as pd
import numpy as np

df=pd.read_csv("/content/HousingData[1].csv")

df.head()

df.tail()

df.info()

df.describe()

df.nunique()

df.isnull().sum()

df.isnull().sum()/(len(df))

from datetime import date
import pandas as pd

current_year = date.today().year

df['CRIM'] = current_year - df['TAX']

print(df.head())

"""Data Handling"""

df.describe().T

print(df.AGE.unique())
print(df.DIS.unique())

cat_cols = df.select_dtypes(include=['object']).columns
num_cols = df.select_dtypes(include=np.number).columns.tolist()

print("Categorical variables:")
print(cat_cols)
print("Numerical variables:")
print(num_cols)

df["NOX"].replace("RM")

data1 = df.dropna()
print(data1)

data2 = df.dropna(axis=1)
print(data2)

data3 = df.fillna(df.mean())
print(data3)

x = df.drop(columns=['CRIM'])
y = df['ZN']
x_train, x_test, y_train, y_test = train_test_split(x, y, test_size=0.2, random_state=42)
print("X_train shape:", x_train.shape)
print("X_test shape:", x_test.shape)
print("y_train shape:", y_train.shape)
print("y_test shape:", y_test.shape)

"""Linear regression"""

import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error, r2_score
import matplotlib.pyplot as plt

df = pd.read_csv('/content/HousingData[1].csv')

df = df.dropna(subset=['AGE', 'DIS'])

X = df[['AGE']]
y = df['DIS']

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

model = LinearRegression()
model.fit(X_train, y_train)
y_pred = model.predict(X_test)
mse = mean_squared_error(y_test, y_pred)
r2 = r2_score(y_test, y_pred)
print("Mean Squared Error:", mse)
print("R-squared:", r2)

plt.scatter(X_test, y_test, color='b', label='Actual')
plt.plot(X_test, y_pred, color='r', label='Predicted')
plt.xlabel('AGE')
plt.ylabel('DIS')
plt.legend()
plt.show()

import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error, r2_score
df = pd.read_csv('/content/HousingData[1].csv')
df.dropna(subset=['MEDV', 'TAX', 'LSTAT'], inplace=True)
X = df[['TAX', 'LSTAT']]
y = df['MEDV']
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
model = LinearRegression()
model.fit(X_train, y_train)
y_pred = model.predict(X_test)
mse = mean_squared_error(y_test, y_pred)
r2 = r2_score(y_test, y_pred)
plt.figure(figsize=(10, 6))
sns.regplot(x=y_test, y=y_pred, scatter_kws={'color': 'blue', 'alpha': 0.7}, line_kws={'color': 'red'})
plt.xlabel('Actual MEDV')
plt.ylabel('Predicted MEDV')
plt.title('Multiple Linear Regression')
plt.grid(True)
plt.show()
print("Mean Squared Error:", mse)
print("R-squared:", r2)

import pandas as pd
import numpy as np

data=pd.read_csv('/content/IPL_Matches_2008-2020[1].csv')

data.head()

data.tail()

data.describe()

data.nunique()

data.isnull().sum()

data.isnull().sum()/(len(data))

data.describe().T

from datetime import date
import pandas as pd

current_year = date.today().year

data['neutral_venue'] = current_year - data['result_margin']

print(data.head())

print(data.city.unique())
print(data.player_of_match.unique())

cat_cols = data.select_dtypes(include=['object']).columns
num_cols = data.select_dtypes(include=np.number).columns.tolist()

print("Categorical variables:")
print(cat_cols)
print("Numerical variables:")
print(num_cols)

data["umpire1"].replace("umpire2")

data1 = data.dropna()
print(data1)

data2 = data.dropna(axis=1)
print(data2)

data3 = data.fillna(data.mean())
print(data3)

"""Linear regressionm"""

import pandas as pd
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error, r2_score
df = pd.read_csv('/content/IPL_Matches_2008-2020[1].csv')
df.dropna(subset=['result_margin'], inplace=True)
X = df[['neutral_venue']]
y = df['result_margin']
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
model = LinearRegression()
model.fit(X_train, y_train)
y_pred = model.predict(X_test)
mse = mean_squared_error(y_test, y_pred)
r2 = r2_score(y_test, y_pred)
plt.scatter(X_test, y_test, color='b', label='Actual Data')
plt.plot(X_test, y_pred, color='r', label='Linear Regression Line')
plt.xlabel('Neutral Venue')
plt.ylabel('Result Margin')
plt.title('Linear Regression: Neutral Venue vs. Result Margin')
plt.legend()
plt.show()
print("Mean Squared Error:", mse)
print("R-squared:", r2)

import pandas as pd
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error, r2_score
df = pd.read_csv('/content/IPL_Matches_2008-2020[1].csv')
df.dropna(subset=['result_margin'], inplace=True)
X = df[['neutral_venue', 'id']]
y = df['result_margin']
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
model = LinearRegression()
model.fit(X_train, y_train)
y_pred = model.predict(X_test)
mse = mean_squared_error(y_test, y_pred)
r2 = r2_score(y_test, y_pred)
plt.figure(figsize=(12, 6))
plt.subplot(1, 2, 1)
plt.scatter(X_test['neutral_venue'], y_test, color='b', label='Actual Data')
plt.plot(X_test['neutral_venue'], y_pred, color='r', label='Linear Regression Line')
plt.xlabel('Neutral Venue')
plt.ylabel('Result Margin')
plt.title('Linear Regression: Neutral Venue vs. Result Margin')
plt.show()